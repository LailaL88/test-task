{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","count","App","props","prev","React","createRef","next","slider","pic1","pic2","pic3","pic4","pic5","pic6","pic7","pic0","pic8","images","Previous","bind","Next","this","current","style","transform","transition","addEventListener","class","id","ref","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0a2deaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {FaArrowCircleLeft} from 'react-icons/fa';\nimport {FaArrowCircleRight} from 'react-icons/fa';\n\n\nlet count = 1;\n        let size = 380;\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.prev = React.createRef();\n        this.next = React.createRef();\n        this.slider = React.createRef();\n        this.pic1 = React.createRef();\n        this.pic2 = React.createRef();\n        this.pic3 = React.createRef();\n        this.pic4 = React.createRef();\n        this.pic5 = React.createRef();\n        this.pic6 = React.createRef();\n        this.pic7 = React.createRef();\n        this.pic0= React.createRef();\n        this.pic8 = React.createRef();\n        this.images = [this.pic0, this.pic1, this.pic2, this.pic3, this.pic4, this.pic5, this.pic6, this.pic7,  this.pic8];\n        this.Previous = this.Previous.bind(this);\n        this.Next = this.Next.bind(this);\n        //this.Slide = this.Slide.bind(this);\n      }\n     Previous(){\n        \n        if (count <= 0) return;\n        count--;\n        this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n        this.slider.current.style.transition = \"transform 1s ease-in-out\";\n        this.slider.current.addEventListener(\"transitionend\", () => {\n            if (this.images[count] == this.pic0) {\n                this.slider.current.style.transition = \"none\";\n                count = 7;\n                this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n            }\n        })\n      }\n      \n      Next(){\n        if (count >= 8) return;\n        count++;\n        this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n        this.slider.current.style.transition = \"transform 1s ease-in-out\";\n        this.slider.current.addEventListener(\"transitionend\", () => {\n        if (this.images[count] == this.pic8) {\n            this.slider.current.style.transition = \"none\";\n            count = 1;\n            this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n        } \n    })\n      }\n\n     /* Slide(){\n          this.slider.current.addEventListener(\"transitionend\", () => {\n        if (this.images[count].id == \"firstImg\") {\n            this.slider.current.style.transition = \"none\";\n            count = 7;\n            this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n        }\n\n        if (this.images[count].id == \"lastImg\") {\n            this.slider.current.style.transition = \"none\";\n            count = 1;\n            this.slider.current.style.transform = 'translateX(' + (-size * count) + 'px)';\n        }\n\n    })\n}*/\n    /*\n    const images = document.querySelectorAll(\".slider div\");\n    const prevBtn = document.getElementById(\"prevBtn\");\n    const nextButton = document.getElementById(\"nextBtn\");\n    const slider = document.getElementById(\"sliderid\");\n\n    let count = 1;\n    let size = images[0].clientWidth;\n    slider.style.transform = 'translateX(' + (-size * count) + 'px)';\n\n    nextButton.addEventListener(\"click\", function() {\n        if (count >= 8) return;\n        count++;\n        slider.style.transform = 'translateX(' + (-size * count) + 'px)';\n        slider.style.transition = \"transform 1s ease-in-out\";\n    });\n\n    prevBtn.onclick = function() {\n        if (count <= 0) return;\n        count--;\n        slider.style.transform = 'translateX(' + (-size * count) + 'px)';\n        slider.style.transition = \"transform 1s ease-in-out\";\n    };\n\n    slider.addEventListener(\"transitionend\", () => {\n        if (images[count].id == \"firstImg\") {\n            slider.style.transition = \"none\";\n            count = 7;\n            slider.style.transform = 'translateX(' + (-size * count) + 'px)';\n        }\n\n        if (images[count].id == \"lastImg\") {\n            slider.style.transition = \"none\";\n            count = 1;\n            slider.style.transform = 'translateX(' + (-size * count) + 'px)';\n        }\n\n    })\n*/\n   \n\n    render(){\n        \n    return ( \n        <div class=\"wrapper\">\n        <i class=\"fas fa-arrow-circle-left\" id=\"prevBtn\" ><FaArrowCircleLeft ref={this.prev} onClick={this.Previous}/></i>\n        <i class=\"fas fa-arrow-circle-right\" id=\"nextBtn\"><FaArrowCircleRight ref={this.next} onClick={this.Next}/></i>\n        <div class=\"slider-container\">\n            <div class=\"slider\" id=\"sliderid\" ref={this.slider}>\n                <div class=\"pic7\" id=\"firstImg\" ref={this.pic0}></div>\n                <div class=\"pic2\" ref={this.pic2}></div>\n                <div class=\"pic1\" ref={this.pic1}></div>\n                <div class=\"pic3\" ref={this.pic3}></div>\n                <div class=\"pic4\" ref={this.pic4}></div>\n                <div class=\"pic5\" ref={this.pic5}></div>\n                <div class=\"pic6\" ref={this.pic6}></div>\n                <div class=\"pic7\" ref={this.pic7}></div>\n                <div class=\"pic2\" id=\"lastImg\" ref={this.pic8}></div>\n            </div>\n        </div>\n    </div>\n    );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}